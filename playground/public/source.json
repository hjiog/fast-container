{"auto":"import React, { createContext, useContext, useEffect, useRef, useState } from 'react';\n\ntype Store = {\n  first: string;\n  second: string;\n};\n\ntype Context<State extends Record<string, unknown>> = {\n  getStore: () => State;\n  setStore: (v: Partial<State>) => void;\n};\n\ntype SubscribeFn = () => void;\n\nfunction createProxy<State extends Record<string, unknown>>(\n  obj: State,\n  dep: Set<string>,\n) {\n  const res = new Proxy(obj, {\n    get(target, key, receiver) {\n      dep.add(key as string);\n      return Reflect.get(target, key, receiver);\n    },\n  });\n  return res;\n}\n\nfunction createContainer<State extends Record<string, unknown>>(initialValue: State) {\n  const context = createContext<Context<State>>(null as unknown as Context<State>);\n\n  const subscribers = new Set<SubscribeFn>();\n  const subscribe = (fn: SubscribeFn) => {\n    subscribers.add(fn);\n    return () => {\n      subscribers.delete(fn);\n    };\n  };\n  const useContainer = () => {\n    const { setStore, getStore } = useContext(context);\n    const preStore = useRef(getStore());\n    const storeKeys = useRef(new Set<string>());\n    const targetStore = createProxy(preStore.current, storeKeys.current);\n    const [, forceUpdate] = useState(0);\n    useEffect(() => {\n      const sub = subscribe(() => {\n        const store = getStore();\n        const isNoEqual = !!Array.from(storeKeys.current).find((key) => {\n          return preStore.current[key] !== store[key];\n        });\n        preStore.current = store;\n        if (isNoEqual) forceUpdate((v) => v + 1);\n      });\n      return sub;\n    }, [getStore]);\n    return {\n      store: targetStore,\n      setStore,\n    };\n  };\n\n  const Provider = (props: { children: React.ReactNode }) => {\n    const { Provider } = context;\n    const value = useRef<State>(initialValue);\n    const setStore: Context<State>['setStore'] = (v) => {\n      value.current = {\n        ...value.current,\n        ...v,\n      };\n      subscribers.forEach((callback) => callback());\n    };\n    return (\n      <Provider\n        {...props}\n        value={{\n          getStore: () => value.current,\n          setStore,\n        }}\n      />\n    );\n  };\n\n  return {\n    Provider,\n    useContainer,\n  };\n}\n\nconst { Provider, useContainer } = createContainer<Store>({\n  first: '',\n  second: '',\n});\n\nfunction Card() {\n  return (\n    <Provider>\n      <>\n        <div className=\"p-3 border-4\">\n          Card\n          <Form name=\"first form\" />\n          <Form name=\"second form\" />\n        </div>\n      </>\n    </Provider>\n  );\n}\n\nfunction Form({ name }: { name: string }) {\n  return (\n    <div className=\"border-2 p-3 m-4\">\n      {name}\n      <div>\n        <Input name=\"first\" />\n        <Input name=\"second\" />\n      </div>\n    </div>\n  );\n}\n\nfunction Input({ name }: { name: 'first' | 'second' }) {\n  const { setStore, store } = useContainer();\n  return (\n    <div>\n      input: {name}\n      <input\n        className=\"border-2 block m-3\"\n        type=\"text\"\n        value={store[name]}\n        onChange={(e) => setStore({ [name]: e.target.value })}\n      />\n    </div>\n  );\n}\n\nexport default Card;\n","basic":"import { createContext, useContext, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\ntype Store = {\n  first: string;\n  second: string;\n};\n\ntype Context = {\n  store: Store;\n  setStore: React.Dispatch<\n    React.SetStateAction<{\n      first: string;\n      second: string;\n    }>\n  >;\n};\n\nconst context = createContext<Context>(null as unknown as Context);\nconst { Provider } = context;\n\nfunction Card() {\n  const [store, setStore] = useState({\n    first: '',\n    second: '',\n  });\n  const navigate = useNavigate();\n  const handleNext = () => {\n    navigate('/memo');\n  };\n  return (\n    <Provider\n      value={{\n        store,\n        setStore,\n      }}\n    >\n      <>\n        <div className=\"p-3 border-4\">\n          Card\n          <Form name=\"first form\" />\n          <Form name=\"second form\" />\n        </div>\n        <button className=\"mt-4\" onClick={handleNext}>\n          next: use memo\n        </button>\n      </>\n    </Provider>\n  );\n}\n\nfunction Form({ name }: { name: string }) {\n  return (\n    <div className=\"border-2 p-3 m-4\">\n      {name}\n      <div>\n        <Input name=\"first\" />\n        <Input name=\"second\" />\n      </div>\n    </div>\n  );\n}\n\nfunction Input({ name }: { name: 'first' | 'second' }) {\n  const { setStore, store } = useContext(context);\n  return (\n    <div>\n      input: {name}\n      <input\n        className=\"border-2 block m-3\"\n        type=\"text\"\n        value={store[name]}\n        onChange={(e) => setStore((v) => ({ ...v, [name]: e.target.value }))}\n      />\n    </div>\n  );\n}\n\nexport default Card;\n","memo":"import { createContext, memo, useContext, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\ntype Store = {\n  first: string;\n  second: string;\n};\n\ntype Context = {\n  store: Store;\n  setStore: React.Dispatch<\n    React.SetStateAction<{\n      first: string;\n      second: string;\n    }>\n  >;\n};\n\nconst context = createContext<Context>(null as unknown as Context);\nconst { Provider } = context;\n\nconst InputMemo = memo(Input);\nconst FormMemo = memo(Form);\nconst CardMemo = memo(Card);\n\nfunction Card() {\n  const [store, setStore] = useState({\n    first: '',\n    second: '',\n  });\n  const navigate = useNavigate();\n  const handleNext = () => {\n    navigate('/subscribe');\n  };\n  return (\n    <Provider\n      value={{\n        store,\n        setStore,\n      }}\n    >\n      <>\n        <div className=\"p-3 border-4\">\n          CardMemo\n          <FormMemo name=\"first form\" />\n          <FormMemo name=\"second form\" />\n        </div>\n        <button className=\"mt-4\" onClick={handleNext}>\n          next: use subscribe\n        </button>\n      </>\n    </Provider>\n  );\n}\n\nfunction Form({ name }: { name: string }) {\n  return (\n    <div className=\"border-2 p-3 m-4\">\n      {name}\n      <div>\n        <InputMemo name=\"first\" />\n        <InputMemo name=\"second\" />\n      </div>\n    </div>\n  );\n}\n\nfunction Input({ name }: { name: 'first' | 'second' }) {\n  const { setStore, store } = useContext(context);\n  return (\n    <div>\n      input: {name}\n      <input\n        className=\"border-2 block m-3\"\n        type=\"text\"\n        value={store[name]}\n        onChange={(e) => setStore((v) => ({ ...v, [name]: e.target.value }))}\n      />\n    </div>\n  );\n}\n\nexport default CardMemo;\n","selector":"import React, { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport shallowequal from 'shallowequal';\n\ntype Store = {\n  first: string;\n  second: string;\n};\n\ntype Context<State> = {\n  getStore: () => State;\n  setStore: (v: Partial<State>) => void;\n};\n\ntype SubscribeFn = () => void;\n\nfunction createContainer<State>(initialValue: State) {\n  const context = createContext<Context<State>>(null as unknown as Context<State>);\n\n  const subscribers = new Set<SubscribeFn>();\n  const subscribe = (fn: SubscribeFn) => {\n    subscribers.add(fn);\n    return () => {\n      subscribers.delete(fn);\n    };\n  };\n  const useContainer = <P,>(selector: (v: State) => P) => {\n    const { setStore, getStore } = useContext(context);\n    const preStore = useRef<P>(selector(getStore()));\n    const [, forceUpdate] = useState(0);\n    useEffect(() => {\n      const sub = subscribe(() => {\n        const store = selector(getStore());\n        const isEqual = shallowequal(preStore.current, store);\n        preStore.current = store;\n        if (!isEqual) forceUpdate((v) => v + 1);\n      });\n      return sub;\n    }, [getStore, selector]);\n    return {\n      store: preStore.current,\n      setStore,\n    };\n  };\n\n  const Provider = (props: { children: React.ReactNode }) => {\n    const { Provider } = context;\n    const value = useRef<State>(initialValue);\n    const setStore: Context<State>['setStore'] = (v) => {\n      value.current = {\n        ...value.current,\n        ...v,\n      };\n      subscribers.forEach((callback) => callback());\n    };\n    return (\n      <Provider\n        {...props}\n        value={{\n          getStore: () => value.current,\n          setStore,\n        }}\n      />\n    );\n  };\n\n  return {\n    Provider,\n    useContainer,\n  };\n}\n\nconst { Provider, useContainer } = createContainer<Store>({\n  first: '',\n  second: '',\n});\n\nfunction Card() {\n  const navigate = useNavigate();\n  const handleNext = () => {\n    navigate('/auto');\n  };\n  return (\n    <Provider>\n      <>\n        <div className=\"p-3 border-4\">\n          Card\n          <Form name=\"first form\" />\n          <Form name=\"second form\" />\n        </div>\n        <button className=\"mt-4\" onClick={handleNext}>\n          next: use subscribe without selector\n        </button>\n      </>\n    </Provider>\n  );\n}\n\nfunction Form({ name }: { name: string }) {\n  return (\n    <div className=\"border-2 p-3 m-4\">\n      {name}\n      <div>\n        <Input name=\"first\" />\n        <Input name=\"second\" />\n      </div>\n    </div>\n  );\n}\n\nfunction Input({ name }: { name: 'first' | 'second' }) {\n  const { setStore, store: value } = useContainer((pre) => pre[name]);\n  return (\n    <div>\n      input: {name}\n      <input\n        className=\"border-2 block m-3\"\n        type=\"text\"\n        value={value}\n        onChange={(e) => setStore({ [name]: e.target.value })}\n      />\n    </div>\n  );\n}\n\nexport default Card;\n","subscribe":"import React, { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\ntype Store = {\n  first: string;\n  second: string;\n};\n\ntype Context<State> = {\n  getStore: () => State;\n  setStore: (v: Partial<State>) => void;\n};\n\ntype SubscribeFn = () => void;\n\nfunction createContainer<State>(initialValue: State) {\n  const context = createContext<Context<State>>(null as unknown as Context<State>);\n\n  const subscribers = new Set<SubscribeFn>();\n  const subscribe = (fn: SubscribeFn) => {\n    subscribers.add(fn);\n    return () => {\n      subscribers.delete(fn);\n    };\n  };\n  const useContainer = () => {\n    const [, forceUpdate] = useState(0);\n    useEffect(() => {\n      return subscribe(() => forceUpdate((v) => v + 1));\n    }, []);\n    const { setStore, getStore } = useContext(context);\n    return {\n      store: getStore(),\n      setStore,\n    };\n  };\n\n  const Provider = (props: { children: React.ReactNode }) => {\n    const { Provider } = context;\n    const value = useRef<State>(initialValue);\n    const setStore: Context<State>['setStore'] = (v) => {\n      value.current = {\n        ...value.current,\n        ...v,\n      };\n      subscribers.forEach((callback) => callback());\n    };\n    return (\n      <Provider\n        {...props}\n        value={{\n          getStore: () => value.current,\n          setStore,\n        }}\n      />\n    );\n  };\n\n  return {\n    Provider,\n    useContainer,\n  };\n}\n\nconst { Provider, useContainer } = createContainer<Store>({\n  first: '',\n  second: '',\n});\n\nfunction Card() {\n  const navigate = useNavigate();\n  const handleNext = () => {\n    navigate('/selector');\n  };\n  return (\n    <Provider>\n      <>\n        <div className=\"p-3 border-4\">\n          Card\n          <Form name=\"first form\" />\n          <Form name=\"second form\" />\n        </div>\n        <button className=\"mt-4\" onClick={handleNext}>\n          next: use subscribe with selector\n        </button>\n      </>\n    </Provider>\n  );\n}\n\nfunction Form({ name }: { name: string }) {\n  return (\n    <div className=\"border-2 p-3 m-4\">\n      {name}\n      <div>\n        <Input name=\"first\" />\n        <Input name=\"second\" />\n      </div>\n    </div>\n  );\n}\n\nfunction Input({ name }: { name: 'first' | 'second' }) {\n  const { setStore, store } = useContainer();\n  return (\n    <div>\n      input: {name}\n      <input\n        className=\"border-2 block m-3\"\n        type=\"text\"\n        value={store[name]}\n        onChange={(e) => setStore({ [name]: e.target.value })}\n      />\n    </div>\n  );\n}\n\nexport default Card;\n","test":"import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useRef,\n  useSyncExternalStore,\n} from 'react';\n\ntype Store = { first: string; last: string };\n\nfunction useStoreData(): {\n  get: () => Store;\n  set: (value: Partial<Store>) => void;\n  subscribe: (callback: () => void) => () => void;\n} {\n  const store = useRef({\n    first: '',\n    last: '',\n  });\n\n  const get = useCallback(() => store.current, []);\n\n  const subscribers = useRef(new Set<() => void>());\n\n  const set = useCallback((value: Partial<Store>) => {\n    store.current = { ...store.current, ...value };\n    subscribers.current.forEach((callback) => callback());\n  }, []);\n\n  const subscribe = useCallback((callback: () => void) => {\n    subscribers.current.add(callback);\n    return () => subscribers.current.delete(callback);\n  }, []);\n\n  return {\n    get,\n    set,\n    subscribe,\n  };\n}\n\ntype UseStoreDataReturnType = ReturnType<typeof useStoreData>;\n\nconst StoreContext = createContext<UseStoreDataReturnType | null>(null);\n\nfunction Provider({ children }: { children: React.ReactNode }) {\n  console.log('provider>>>>>>>');\n  return <StoreContext.Provider value={useStoreData()}>{children}</StoreContext.Provider>;\n}\n\nfunction useStore<SelectorOutput>(\n  selector: (store: Store) => SelectorOutput,\n): [SelectorOutput, (value: Partial<Store>) => void] {\n  const store = useContext(StoreContext);\n  if (!store) {\n    throw new Error('Store not found');\n  }\n\n  const state = useSyncExternalStore(store.subscribe, () => selector(store.get()));\n\n  return [state, store.set];\n}\n\nconst TextInput = ({ value }: { value: 'first' | 'last' }) => {\n  const [fieldValue, setStore] = useStore((store) => store[value]);\n  return (\n    <div className=\"field\">\n      {value}:{' '}\n      <input value={fieldValue} onChange={(e) => setStore({ [value]: e.target.value })} />\n    </div>\n  );\n};\n\nconst Display = ({ value }: { value: 'first' | 'last' }) => {\n  const [fieldValue] = useStore((store) => store[value]);\n  return (\n    <div className=\"value\">\n      {value}: {fieldValue}\n    </div>\n  );\n};\n\nconst FormContainer = () => {\n  return (\n    <div className=\"container\">\n      <h5>FormContainer</h5>\n      <TextInput value=\"first\" />\n      <TextInput value=\"last\" />\n    </div>\n  );\n};\n\nconst DisplayContainer = () => {\n  return (\n    <div className=\"container\">\n      <h5>DisplayContainer</h5>\n      <Display value=\"first\" />\n      <Display value=\"last\" />\n    </div>\n  );\n};\n\nconst ContentContainer = () => {\n  return (\n    <div className=\"container\">\n      <h5>ContentContainer</h5>\n      <FormContainer />\n      <DisplayContainer />\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <Provider>\n      <div className=\"container\">\n        <h5>App</h5>\n        <ContentContainer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n"}